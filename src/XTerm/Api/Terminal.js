import { Terminal } from 'xterm'
export const _new = o => l => () => new Terminal(o,l);
export const _element = term => () => term.element;
export const _textarea = term => () => term.textarea;
export const rows = term => () => term.rows;
export const cols = term => () => term.cols;
export const buffer = term => () => term.buffer;
export const markers = term => () => term.markers;
export const _setOptions = term => opts => () => terms.setOptions(opts);
export const onBell = term => listener => () => term.onBell(listener);
export const onBinary = term => listener => () => term.onBinary(s => listener(s)());
export const onCursorMove = term => listener => () => term.onCursorMove(listener);
export const onData = term => listener => () => term.onData(s => listener(s)());
export const onKey = term => listener => () => term.onKey(k => listener(k)());
export const onLineFeed = term => listener => () => term.onLineFeed(listener);
export const onRender = term => listener => () => term.onRender(k => listener(k)());
export const onWriteParsed = term => listener => () => term.onWriteParsed(listener);
export const onResize = term => listener => () => term.onResize(k => listener(k)());
export const onScroll = term => listener => () => term.onScroll(s => listener(s)());
export const onSelectionChange = term => listener => () => term.onSelectionChange(listener);
export const onTitleChange = term => listener => () => term.onTitleChange(s => listener(s)());
export const blur = term => () => term.blur();
export const focus = term => () => term.focus();
export const resize = term => size => () => term.resize(size.cols,size.rows);
export const openTerminal = term => el => () => term.open(el);
export const attachCustomKeyEventHandler = term => handler => () => term.attachCustomKeyEventHandler(handler);
export const registerILinkProvider = term => provider => () => term.registerLinkProvider({
  provideLinks: (bufferLineNumber, callback) => {
    provider(bufferLineNumber)(callback)();
    callback(undefined);
  }
}); 
export const registerMarker = term => offset => () => term.registerMarker(offset);
export const hasSelection = term => () => term.hasSelection();
export const getSelection = term => () => term.getSelection();
export const _getSelectionPosition = term => () => term.getSelectionPosition();
export const clearSelection = term => () => term.clearSelection();
export const select = term => s => () => term.select(s.column,s.row,s.length);
export const selectAll = term => () => term.selectAll();
export const selectLines = term => s => () => term.selectLines(s.start,s.end);
export const scrollLines = term => n => () => term.scrollLines(n);
export const scrollPages = term => n => () => term.scrollPages(n);
export const scrollToTop = term => () => term.scrollToTop();
export const scrollToBottom = term => () => term.scrollToBottom();
export const scrollToLine = term => n => () => term.scrollToLine(n);
export const clear = term => () => term.clear();
export const write = term => str => callback => () => term.write(str, callback);
export const writeln = term => str => callback => () => term.writeln(str, callback);
export const paste = term => str => () => term.paste(str);
export const refresh = term => r => () => term.refresh(r.start,r.end);
export const clearTextureAtlas = term => () => term.clearTextureAtlas();
export const reset = term => () => term.reset();
export const _loadAddon = term => addon => () => term.loadAddon(addon);
